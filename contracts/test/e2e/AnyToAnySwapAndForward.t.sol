// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.19;

import {TransferHelper} from "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import {SwapAndXCall} from "../../origin/Swap/SwapAndXCall.sol";
import {TestHelper} from "../utils/TestHelper.sol";
import {Greeter} from "../utils/Greeter.sol";
import {XSwapAndGreetTarget} from "../../example/XSwapAndGreet/XSwapAndGreetTarget.sol";
import {OneInchUniswapV3} from "../../shared/Swap/OneInch/OneInchUniswapV3.sol";

contract AnyToAnySwapAndForwardTest is TestHelper {
  SwapAndXCall swapAndXCall;
  Greeter greeter;
  XSwapAndGreetTarget xSwapAndGreetTarget;
  OneInchUniswapV3 oneInchUniswapV3;

  address public immutable OP_OP = 0x4200000000000000000000000000000000000042;
  address public immutable OP_USDC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;
  address public immutable ARB_USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;
  address public immutable ARB_ARB = 0x912CE59144191C1204E64559FE8253a0e49E6548;

  address public immutable OP_OP_WHALE = 0x2501c477D0A35545a387Aa4A3EEe4292A9a8B3F0;
  address public immutable ARB_USDC_WHALE = 0x489ee077994B6658eAfA855C308275EAd8097C4A;
  address public immutable ONEINCH_SWAPPER = 0x1111111254EEB25477B68fb85Ed929f73A960582;

  address public immutable FALLBACK_ADDRESS = address(1);

  function utils_setUpOrigin() public {
    setUpOptimism(87307161);
    swapAndXCall = new SwapAndXCall(CONNEXT_OPTIMISM);
    swapAndXCall.addSwapper(ONEINCH_SWAPPER);
    vm.prank(OP_OP_WHALE);
    TransferHelper.safeTransfer(OP_OP, address(this), 1000 ether);

    vm.label(address(swapAndXCall), "SwapAndXCall");
    vm.label(address(this), "AnyToAnySwapAndForwardTest");
    vm.label(OP_OP, "OP_OP");
    vm.label(OP_USDC, "OP_USDC");
    vm.label(OP_OP_WHALE, "OP_OP_WHALE");
  }

  function utils_setUpDestination() public {
    setUpArbitrum(78000226);
    greeter = new Greeter();
    xSwapAndGreetTarget = new XSwapAndGreetTarget(address(greeter), CONNEXT_ARBITRUM);
    oneInchUniswapV3 = new OneInchUniswapV3(ONEINCH_SWAPPER);
    xSwapAndGreetTarget.addSwapper(address(oneInchUniswapV3)); // 1inch address on arbitrum

    vm.label(address(greeter), "Greeter");
    vm.label(address(xSwapAndGreetTarget), "XSwapAndGreetTarget");
    vm.label(address(oneInchUniswapV3), "OneInchUniswapV3");
    vm.label(ARB_ARB, "ARB_ARB");
    vm.label(ARB_USDC, "ARB_USDC");
  }

  function test_AnyToAnySwapAndForwardTest__works() public {
    utils_setUpOrigin();
    utils_setUpDestination();

    vm.selectFork(optimismForkId);
    assertEq(vm.activeFork(), optimismForkId);

    // origin
    // start with OP and swap to USDC to bridge to destination
    TransferHelper.safeApprove(OP_OP, address(swapAndXCall), 1000 ether);
    bytes
      memory oneInchApiDataOpToUsdc = hex"12aa3caf000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a00000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000078f1ff510000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097c00000000000000000000000000000000000000095e0009300008e60008cc00a0c9e75c480000000000000007020100000000000000000000000000000000000000000000089e0006d100032700a007e5c0d200000000000000000000000000000000000000000000030300021c0001cd00a0c9e75c4800000000000000002a0800000000000000000000000000000000000000000000000000019f00004f02a0000000000000000000000000000000000000000000000000003e23993ea6ce3cee63c1e500fc1f3296458f9b2a27a0b91dd7681c4020e09d0542000000000000000000000000000000000000425126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000146409db6c1079d00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436df18000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000b005cef732b384620ee63c1e50195d9d28606ee55de7667f0f176ebfc3215cfd9c0420000000000000000000000000000000000000600a0bd46a34303b5ad7d6d6f92a77f47f98c28c84893fbccc9480900000000000000000000006c43da214fab3315aa6c02e0b8f2bfb7ef2e3c60a50000000000000000000000ae88d07558470484c03d3bb44c3ecc36cafcf43253000000000000000000000051000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000b5ad7d6d6f92a77f47f98c28c84893fbccc9480900000000000000000000000088d07558470484c03d3bb44c3ecc36cafcf432530000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700a007e5c0d200000000000000000000000000000000000000000000000000038600008e4820a6d7d0e650aa40ffa42d845a354c12c2bc0ab15f42000000000000000000000000000000000000429331621200000000000000000000000042000000000000000000000000000000000000420000000000000000000000004200000000000000000000000000000000000006000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a00a0c9e75c48000000000000000029090000000000000000000000000000000000000000000000000002ca00011c4312f9d5940c2313636546ab9852354860dce275dbad00000000000000000000000000000000000000000000000000000000045a6d40002424b31a0c000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000420000000000000000000000000000000000000600a007e5c0d200000000000000000000000000000000000000000000000000018a0000d05120c35dadb65012ec5796536bd9864ed8773abc74c44200000000000000000000000000000000000006006402b9446c0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a0000000000000000000000007086622e6db990385b102d79cb1218947fb549a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040207086622e6db990385b102d79cb1218947fb549a9627dd56a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000004200000000000000000000000000000000000006000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000000000000100a0c9e75c480000000000000000221000000000000000000000000000000000000000000000000000019f00004f02a0000000000000000000000000000000000000000000000000000000001b17ef8fee63c1e5011d751bc1a723accf1942122ca9aa82d49d08d2ae42000000000000000000000000000000000000425126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039913b6500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436df18000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000000020d6bdbf787f5c764cbc14f9669b88837ca1490cca17c3160700a0f2fa6b667f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000866238220000000000000000000000000098760180a06c4eca277f5c764cbc14f9669b88837ca1490cca17c316071111111254eeb25477b68fb85ed929f73a96058200000000cfee7c08";

    // destination
    // set up destination swap params
    // uint256 usdcAmount = 100000000;
    // uint256 minReturn = 75555343887264722127;
    // address USDC_ARB_POOL = 0xcDa53B1F66614552F834cEeF361A8D12a0B8DaD8;
    // uint256[] memory pools = new uint256[](1);
    // pools[0] = ONE_FOR_ZERO_MASK + uint256(uint160(USDC_ARB_POOL));
    // bytes memory oneInchApiDataUsdcToArb = abi.encode(usdcAmount, minReturn, pools);

    bytes
      memory oneInchApiDataUsdcToArb = hex"e449022e0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000004188a80f4c2e52ccf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001800000000000000000000000cda53b1f66614552f834ceef361a8d12a0b8dad8cfee7c08";

    bytes memory _forwardCallData = abi.encode("Hello, Connext!");
    bytes memory _swapperData = abi.encode(
      address(oneInchUniswapV3),
      ARB_ARB,
      oneInchApiDataUsdcToArb,
      _forwardCallData
    );

    // final calldata includes both origin and destination swaps
    bytes memory callData = abi.encode(FALLBACK_ADDRESS, _swapperData);
    // set up swap calldata
    swapAndXCall.swapAndXCall(
      OP_OP,
      OP_USDC,
      1000 ether,
      ONEINCH_SWAPPER,
      oneInchApiDataOpToUsdc,
      ARBITRUM_DOMAIN_ID,
      address(greeter),
      address(this),
      300,
      callData,
      123 // fake relayer fee, will be in USDC
    );

    vm.selectFork(arbitrumForkId);
    vm.prank(ARB_USDC_WHALE);
    TransferHelper.safeTransfer(ARB_USDC, address(xSwapAndGreetTarget), 99800000);
    vm.prank(CONNEXT_ARBITRUM);
    xSwapAndGreetTarget.xReceive(
      bytes32(""),
      99800000, // Final Amount receive via Connext(After AMM calculation)
      ARB_USDC,
      address(0),
      123,
      callData
    );
    assertEq(greeter.greeting(), "Hello, Connext!");
    assertEq(IERC20(ARB_ARB).balanceOf(address(greeter)), 83059436227592757201);
  }
}
